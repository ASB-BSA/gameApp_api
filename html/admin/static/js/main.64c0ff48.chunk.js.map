{"version":3,"sources":["components/Login.tsx","components/Dashboard.tsx","atoms/CharacteristicState.ts","utils/Characteristic.tsx","atoms/IsRedirect.ts","components/Characteristic.tsx","atoms/AdministratorState.ts","components/template/Layout.tsx","components/template/Toast.tsx","components/Administrator.tsx","components/Settings/CreateGroup.tsx","components/Settings/SettingListItem.tsx","atoms/SettingsState.ts","components/Setting.tsx","components/Settings/SettingItemEdit.tsx","components/SettingsDetail.tsx","utils/AuthProvider.tsx","config/RouterConfig.tsx","App.tsx","reportWebVitals.ts","config/ChakraConfig.tsx","index.tsx"],"names":["Login","useForm","register","handleSubmit","navigate","useNavigate","useState","isError","setIsError","onSubmit","data","a","axios","post","then","e","console","log","replace","catch","auth","minH","align","justify","bg","useColorModeValue","spacing","mx","maxW","py","px","fontSize","color","rounded","boxShadow","p","id","type","direction","base","sm","_hover","Dashboard","CharacteristicState","atom","key","default","ConvertToText","param","paramFunc","conditions_parameter","value","String","conditions_value","expression","expressionFunc","conditions_expression","to_whom","toWhomFunc","parameter","ParameterFunc","how_much","happen","HappenFunc","IsRedirect","Characteristic","useRecoilState","characteristics","setCharacteristics","setRedirect","useSetRecoilState","useEffect","get","defaultValues","name","setValue","reset","response","size","variant","mt","colSpan","map","i","colorScheme","aria-label","icon","alignItems","onChange","Number","AdministratorState","Layout","h","RouterConfig","path","children","el","elm","label","placement","to","justifyContent","mr","flex","Toast","w","UI","shadow","overflow","span","fontWeight","Administrator","toast","admin","setAdmin","isOpen","onOpen","onClose","position","render","onClick","user","CreatedAt","ID","CreateGroup","SettingListItem","props","mb","group_category","lineHeight","group_name","SettingState","Setting","settings","setSettings","textAlign","lg","columns","md","spacingX","spacingY","SettingItemEdit","setting","setting_name","setting_label","setting_type","setting_value","put","SettingsDetail","useParams","item","setItem","length","find","f","group_id","edit","setEdit","AuthProvider","useRecoilValue","App","element","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","useSystemColorMode","initialColorMode","fonts","heading","body","defaults","baseURL","withCredentials","ReactDOM","StrictMode","document","getElementById"],"mappings":"oTA6FeA,EAvED,WAAO,IAAD,EACiBC,cAA3BC,EADU,EACVA,SAAUC,EADA,EACAA,aACZC,EAAWC,cAFC,EAGYC,oBAAkB,GAH9B,mBAGXC,EAHW,KAGFC,EAHE,KAKZC,EAAWN,GAAa,SAAAO,IAClB,uCAAG,sBAAAC,EAAA,sEACLC,IAAMC,KAAK,QAASH,GACvBI,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAEL,MACdF,GAAW,GACXJ,EAAS,IAAK,CAAEc,SAAS,OAE1BC,OAAM,kBAAMX,GAAW,MAPf,2CAAH,qDASVY,MAGF,OACE,cAAC,IAAD,CACEC,KAAM,QACNC,MAAO,SACPC,QAAS,SACTC,GAAIC,YAAkB,UAAW,YAJnC,SAKE,eAAC,IAAD,CAAOC,QAAS,EAAGC,GAAI,OAAQC,KAAM,KAAMC,GAAI,GAAIC,GAAI,EAAvD,UACE,eAAC,IAAD,CAAOR,MAAO,SAAd,UACE,cAAC,IAAD,CAASS,SAAU,MAAnB,qCACA,cAAC,IAAD,CAAMA,SAAU,KAAMC,MAAO,WAA7B,gDAIF,sBAAMvB,SAAUA,EAAhB,SACE,cAAC,IAAD,CACEwB,QAAS,KACTT,GAAIC,YAAkB,QAAS,YAC/BS,UAAW,KACXC,EAAG,EAJL,SAKE,eAAC,IAAD,CAAOT,QAAS,EAAhB,UACE,eAAC,IAAD,CAAaU,GAAG,OAAhB,UACE,cAAC,IAAD,sBACA,cAAC,IAAD,aAAOC,KAAK,QAAWnC,EAAS,aAElC,eAAC,IAAD,CAAakC,GAAG,WAAhB,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,aAAOC,KAAK,YAAenC,EAAS,iBAEtC,eAAC,IAAD,CAAOwB,QAAS,GAAhB,UACE,cAAC,IAAD,CACEY,UAAW,CAAEC,KAAM,SAAUC,GAAI,OACjClB,MAAO,QACPC,QAAS,gBAHX,SAIKhB,GAAW,cAAC,IAAD,CAAMyB,MAAO,UAAb,qBAEhB,cAAC,IAAD,CACEK,KAAK,SACLb,GAAI,WACJQ,MAAO,QACPS,OAAQ,CACNjB,GAAI,YALR,qCCjEDkB,EARG,WAChB,OACE,yB,4DCcWC,EALaC,YAAgC,CAC1DC,IAAK,sBACLC,QAAS,KCiEIC,EAfO,SAACrC,GACnBM,QAAQC,IAAIP,GACZ,IAAMsC,EAjEQ,SAACjC,GACf,OAAOA,GACH,IAAK,KACD,MAAO,uBACX,IAAK,SACD,MAAO,wEA4DDkC,CAAUvC,EAAKwC,sBACvBC,EAAQC,OAAO1C,EAAK2C,kBACpBC,EA1Da,SAACvC,GACpB,OAAOA,GACH,IAAK,IACD,MAAO,iCACX,IAAK,IACD,MAAO,iCACX,IAAK,IACD,MAAO,sBAmDIwC,CAAe7C,EAAK8C,uBACjCC,EAhDS,SAAC1C,GAChB,OAAOA,GACH,IAAK,SACD,MAAO,eACX,IAAK,aACD,MAAO,2BACX,IAAK,gBACD,MAAO,2BACX,IAAK,cACD,MAAO,qBACX,IAAK,iBACD,MAAO,sBAqCC2C,CAAWhD,EAAK+C,SAC1BE,EAlCY,SAAC5C,GACnB,OAAOA,GACH,IAAK,SACD,MAAO,qBACX,IAAK,UACD,MAAO,qBACX,IAAK,gBACD,MAAO,6CACX,IAAK,UACD,MAAO,qBACX,IAAK,KACD,MAAO,KACX,IAAK,KACD,MAAO,MAqBG6C,CAAclD,EAAKiD,WAC/BE,EAAWT,OAAO1C,EAAKmD,UACvBC,EAnBS,SAAC/C,GAChB,OAAOA,GACH,IAAK,IACD,MAAO,iCACX,IAAK,IACD,MAAO,iCACX,IAAK,IACD,MAAO,sBAYAgD,CAAWrD,EAAKoD,QAI/B,MAFY,UAAMd,GAAN,OAAcG,EAAd,YAAuBG,EAAvB,iBAAqCG,EAArC,iBAAgDE,EAAhD,iBAA6DE,GAA7D,OAAwEC,ICpEzEE,EALIpB,YAAc,CAC/BC,IAAK,aACLC,SAAS,ICgKImB,EA1JQ,WAAO,IAAD,EACmBC,YAAevB,GADlC,mBACpBwB,EADoB,KACHC,EADG,KAErBC,EAAcC,YAAkBN,GAEtCO,qBAAU,WACR3D,IAAM4D,IAAI,kBACP1D,MAAK,SAAAC,GAAC,OAAIqD,EAAmBrD,EAAEL,SAC/BS,OAAM,WACLkD,GAAY,QAEf,IAVwB,MAYyBpE,YAAiC,CACnFwE,cAAe,CACbC,KAAM,GACNxB,qBAAsB,KACtBG,iBAAkB,EAClBG,sBAAuB,IACvBC,QAAS,SACTE,UAAW,SACXG,OAAQ,IACRD,SAAU,KATN3D,EAZmB,EAYnBA,SAAUyE,EAZS,EAYTA,SAAUxE,EAZD,EAYCA,aAAcyE,EAZf,EAYeA,MAapCnE,EAAWN,GAAa,SAAAO,GAC5BA,EAAK2C,iBAAmBD,OAAO1C,EAAK2C,kBACpC3C,EAAKmD,SAAWT,OAAO1C,EAAKmD,UAE5BO,EAAmB,GAAD,mBAAKD,GAAL,CAAsBzD,KACxCE,IAAMC,KAAN,iBAA6BH,GAC1BI,MAAK,WACJ8D,IACAhE,IAAM4D,IAAI,kBACP1D,MAAK,SAAAC,GAAC,OAAIqD,EAAmBrD,EAAEL,SAC/BS,OAAM,WACLkD,GAAY,SAGjBlD,OAAM,SAAAJ,GACLC,QAAQC,IAAIF,EAAE8D,gBAIpB,OACE,qCACE,cAAC,IAAD,CACEC,KAAK,KADP,sCAGA,sBAAMrE,SAAUA,EAAhB,SACE,eAAC,IAAD,CACEsE,QAAQ,UACRC,GAAI,EAFN,UAIE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,2BACA,cAAC,IAAD,CAAOC,QAAS,EAAhB,0BACA,cAAC,IAAD,gCAGJ,eAAC,IAAD,WAEId,EAAgBe,KAAI,SAACnE,EAAGoE,GACtB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAQpE,EAAE2D,OACV,cAAC,IAAD,CAAOO,QAAS,EAAhB,SAAoBlC,EAAchC,KAClC,cAAC,IAAD,UACE,eAAC,IAAD,CACEuB,UAAU,MACVZ,QAAS,EAFX,UAIE,cAAC,IAAD,CACE0D,YAAY,OACZC,aAAW,OACXC,KAAM,cAAC,IAAD,MAER,cAAC,IAAD,CACEF,YAAY,MACZC,aAAW,SACXC,KAAM,cAAC,IAAD,aAhBFH,MAwBlB,eAAC,IAAD,WACE,cAAC,IAAD,UAAO,cAAC,IAAD,aAAU9C,KAAK,QAAWnC,EAAS,YAC1C,cAAC,IAAD,UACE,eAAC,IAAD,2BAAeA,EAAS,yBAAxB,cACE,wBAAQiD,MAAM,KAAd,0BACA,wBAAQA,MAAM,SAAd,4CAGJ,cAAC,IAAD,UACE,eAAC,IAAD,CAASoC,WAAW,WAApB,UACE,cAAC,IAAD,CAAgBC,SAAU,SAAAzE,GAAC,OAAI4D,EAAS,mBAAoBc,OAAO1E,KAAnE,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,qBAGJ,cAAC,IAAD,UACE,eAAC,IAAD,2BAAeb,EAAS,0BAAxB,cACE,wBAAQiD,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,0BAGJ,cAAC,IAAD,UACE,eAAC,IAAD,2BAAejD,EAAS,YAAxB,cACE,wBAAQiD,MAAM,SAAd,gCACA,wBAAQA,MAAM,aAAd,4CACA,wBAAQA,MAAM,gBAAd,0EACA,wBAAQA,MAAM,cAAd,4CACA,wBAAQA,MAAM,iBAAd,gFAGJ,cAAC,IAAD,UACE,eAAC,IAAD,2BAAejD,EAAS,cAAxB,cACE,wBAAQiD,MAAM,SAAd,gCACA,wBAAQA,MAAM,UAAd,gCACA,wBAAQA,MAAM,gBAAd,wDACA,wBAAQA,MAAM,UAAd,gCACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,sBAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CAAgBqC,SAAU,SAAAzE,GAAC,OAAI4D,EAAS,WAAYc,OAAO1E,KAA3D,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,UACE,eAAC,IAAD,2BAAeb,EAAS,WAAxB,cACE,wBAAQiD,MAAM,IAAd,gCACA,wBAAQA,MAAM,IAAd,gCACA,wBAAQA,MAAM,IAAd,0BAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CAAWd,KAAK,SAAhB,2C,oCC7IDqD,EALY9C,YAA+B,CACxDC,IAAK,qBACLC,QAAS,K,iBCmDI6C,EAvDA,WACb,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,EAAE,QACF/D,GAAI,GACJC,GAAI,EACJN,GAAG,WAJL,SAME,cAAC,IAAD,CAAUE,QAAS,EAAnB,SACGmE,GAAaX,KAAI,SAAAnE,GAAM,IAAD,EACrB,OACA,mCAAc,WAAXA,EAAE+E,OAAF,UAAuB/E,EAAEgF,gBAAzB,aAAuB,EAAYb,KAAI,SAAAc,GAAO,IAAD,EAC9C,OACE,6CAAGA,EAAGD,gBAAN,aAAG,EAAab,KAAI,SAAAe,GAAG,OACrB,mCAAGA,EAAIX,MACL,cAAC,IAAD,CACEY,MAAOD,EAAIvB,KACXyB,UAAU,QAFZ,SAIE,cAAC,IAAD,CACEC,GAAE,UAAKH,EAAIH,MADb,SAGE,cAAC,IAAD,CACEP,WAAW,SACXc,eAAe,SAFjB,SAIE,cAAC,IAAD,CACEC,GAAI,EACJvE,SAAS,OACTC,MAAM,QAHR,SAKGiE,EAAIX,iCAa3B,cAAC,IAAD,CACEiB,KAAM,EACNpE,EAAG,EAFL,SAIE,cAAC,IAAD,U,QChBOqE,EAnCD,WACZ,OACE,eAAC,IAAD,CACE5E,KAAK,KACL6E,EAAE,OACF9E,GAAG,OACHH,GAAIkF,IAAqB,QAAS,YAClCC,OAAO,KACP1E,QAAQ,KACR2E,SAAS,SAPX,UASE,cAAC,IAAD,CAASP,eAAe,SAASd,WAAW,SAASkB,EAAG,GAAIjF,GAAG,YAA/D,SACE,cAAC,IAAD,CAAsBQ,MAAM,YAG9B,cAAC,IAAD,CAAQL,IAAK,EAAGE,GAAI,EAAGC,GAAI,EAA3B,SACE,eAAC,IAAD,CAAQH,GAAI,EAAZ,UACE,cAAC,IAAUkF,KAAX,CACE7E,MAAO0E,IAAqB,YAAa,aACzCI,WAAW,OAFb,qBAMA,cAAC,IAAU3E,EAAX,CACEH,MAAO0E,IAAqB,WAAY,YACxC3E,SAAS,KAFX,mEC+IKgF,EA1JO,WACpB,IAAMC,EAAQN,MADY,EAEAxC,YAAewB,GAFf,mBAEnBuB,EAFmB,KAEZC,EAFY,KAGpB7C,EAAcC,YAAkBN,GAEtCO,qBAAU,WACR3D,IAAM4D,IAAI,WACP1D,MAAK,SAAAC,GACJmG,EAASnG,EAAEL,SAEZS,OAAM,WACLkD,GAAY,QAEf,IAbuB,MAeUqC,MAA5BS,EAfkB,EAelBA,OAAQC,EAfU,EAeVA,OAAQC,EAfE,EAeFA,QAfE,EAiBSpH,cAA3BC,EAjBkB,EAiBlBA,SAAUC,EAjBQ,EAiBRA,aAjBQ,EAkBIG,oBAAkB,GAlBtB,mBAkBnBC,EAlBmB,KAkBVC,EAlBU,KAoBpBC,EAAWN,GAAa,SAAAO,IAClB,uCAAG,sBAAAC,EAAA,sEACLC,IAAMC,KAAK,WAAYH,GAC1BI,MAAK,WACJuG,IACA7G,GAAW,GAEXwG,EAAM,CACJM,SAAU,eACVC,OAAQ,kBACN,cAAC,EAAD,OAIJ3G,IAAM4D,IAAI,WACP1D,MAAK,SAAAC,GACJmG,EAASnG,EAAEL,SAEZS,OAAM,WACLkD,GAAY,SAGjBlD,OAAM,SAACJ,GACNC,QAAQC,IAAIF,EAAE8D,UACdrE,GAAW,MAvBJ,2CAAH,qDA0BVY,MAGF,OACE,qCACE,cAAC,IAAD,CACE0D,KAAK,KADP,4CAIA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAW0C,QAASJ,EAApB,6EAGF,eAAC,IAAD,CACEpC,GAAI,EACJD,QAAQ,UAFV,UAIE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,6CACA,cAAC,IAAD,iCACA,cAAC,IAAD,gCAGJ,cAAC,IAAD,UACGkC,EAAM/B,KAAI,SAAAnE,GACT,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAQA,EAAE0G,OACV,cAAC,IAAD,UAAQ1G,EAAE2G,YACV,cAAC,IAAD,UACE,eAAC,IAAD,CACEpF,UAAU,MACVZ,QAAS,EAFX,UAIE,cAAC,IAAD,CACE0D,YAAY,OACZC,aAAW,OACXC,KAAM,cAAC,IAAD,MAER,cAAC,IAAD,CACEF,YAAY,MACZC,aAAW,SACXC,KAAM,cAAC,IAAD,aAhBFvE,EAAE4G,YA0BtB,eAAC,IAAD,CAAUR,OAAQA,EAAQE,QAASA,EAAnC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,IAAD,IACA,cAAC,IAAD,UACE,sBAAM5G,SAAUA,EAAhB,SACE,cAAC,IAAD,CACE0B,EAAG,EADL,SAEE,eAAC,IAAD,CAAUT,QAAS,EAAnB,UACE,eAAC,IAAD,CAAgBU,GAAG,OAAnB,UACE,cAAC,IAAD,sBACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,aAErC,eAAC,IAAD,CAAgBkC,GAAG,WAAnB,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,aAAUC,KAAK,YAAenC,EAAS,iBAEzC,eAAC,IAAD,CAAgBkC,GAAG,mBAAnB,UACE,cAAC,IAAD,+BACA,cAAC,IAAD,aAAUC,KAAK,YAAenC,EAAS,yBAEzC,eAAC,IAAD,CAAUwB,QAAS,GAAnB,UACE,cAAC,IAAD,CACEY,UAAW,CAAEC,KAAM,SAAUC,GAAI,OACjClB,MAAO,QACPC,QAAS,gBAHX,SAIKhB,GAAW,cAAC,IAAD,CAASyB,MAAO,UAAhB,qBAEhB,cAAC,IAAD,CACEK,KAAK,SACLb,GAAI,WACJQ,MAAO,QACPS,OAAQ,CACNjB,GAAI,YALR,4CAeV,cAAC,IAAD,UACE,cAAC,IAAD,CAAWuD,QAAQ,QAAQyC,QAASH,EAApC,gC,SClFGO,EArEK,WAAO,IAAD,EACYlB,MAA5BS,EADgB,EAChBA,OAAQC,EADQ,EACRA,OAAQC,EADA,EACAA,QAClBL,EAAQN,MAFU,EAIMpG,oBAAkB,GAJxB,mBAIjBC,EAJiB,KAIRC,EAJQ,OAMWP,cAA3BC,EANgB,EAMhBA,SAAUC,EANM,EAMNA,aAoBlB,OACE,qCACE,cAAC,IAAD,CAAWqH,QAASJ,EAApB,8DAEA,eAAC,IAAD,CAAUD,OAAQA,EAAQE,QAASA,EAAnC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,IAAD,IACE,uBAAM5G,SAAUN,GA5BiB,SAAAO,GACzCE,IAAMC,KAAK,WAAYH,GACpBI,MAAK,WACJuG,IACA7G,GAAW,GAEXwG,EAAM,CACJM,SAAU,eACVC,OAAQ,kBACN,cAAC,EAAD,UAILpG,OAAM,SAACJ,GACNC,QAAQC,IAAIF,EAAE8D,UACdrE,GAAW,SAaP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAUkB,QAAS,EAAnB,UACE,eAAC,IAAD,CAAgBU,GAAG,aAAnB,UACE,cAAC,IAAD,yBACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,gBACnC,cAAC,IAAD,kHAGF,eAAC,IAAD,CAAgBkC,GAAG,iBAAnB,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,oBACnC,cAAC,IAAD,8IAEDK,GAAW,cAAC,IAAD,CAASyB,MAAM,UAAf,+EAGhB,eAAC,IAAD,WACE,cAAC,IAAD,CACEK,KAAK,SACL+C,YAAY,OACZkB,GAAI,EAHN,0BAOA,cAAC,IAAD,CAAWvB,QAAQ,QAAQyC,QAASH,EAApC,gD,SClBDQ,GA3CS,SAACC,GACvB,IAAM1H,EAAWC,cAEjB,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEkF,WAAW,SACXc,eAAe,SACfI,EAAG,EACHb,EAAG,EACHmC,GAAI,EACJ9F,QAAQ,OACRD,MAAO0E,IAAA,uBACPlF,GAAIkF,IAAA,uBARN,SAUE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAgBc,QAAS,WACvBpH,EAAS,YAAD,OAAa0H,EAAMpH,KAAKsH,kBADlC,SAGE,cAAC,IAAD,CACED,GAAI,EACJjD,KAAK,KACLmD,WAAW,UACXjG,MAAO0E,IAAqB,WAAY,aAJ1C,SAMGoB,EAAMpH,KAAKwH,eAGhB,eAAC,IAAD,CACEnG,SAAS,KACTC,MAAO0E,IAAqB,WAAY,YAF1C,UAIGoB,EAAMpH,KAAKwH,WAJd,4CClBKC,GALMvF,YAAqB,CACxCC,IAAK,eACLC,QAAS,KCkDIsF,GA9DC,WAAO,IAAD,EACYlE,YAAeiE,IAD3B,mBACbE,EADa,KACHC,EADG,KAEdjE,EAAcC,YAAkBN,GAUtC,OARAO,qBAAU,WACR3D,IAAM4D,IAAI,YACP1D,MAAK,SAAAC,GAAC,OAAIuH,EAAYvH,EAAEL,SACxBS,OAAM,WACLkD,GAAY,QAEf,IAGD,qCACE,cAAC,IAAD,CACES,KAAK,KADP,4CAIA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAGF,cAAC,IAAD,CACEuB,eAAe,SACfd,WAAW,SACX1D,GAAI,EAHN,SAKE,eAAC,IAAD,CACEC,GAAI,EACJD,GAAI,GACJF,GAAG,OAHL,UAKE,eAAC,IAAD,CAAQ4G,UAAU,SAAlB,UACE,cAAC,IAAD,CAAYzB,WAAW,YAAvB,sCACA,cAAC,IAAD,CACE9B,GAAI,EACJpD,KAAK,MACLG,SAAS,KACTJ,GAAI,CAAE6G,GAAI,QACVxG,MAAO0E,IAAqB,WAAY,YAL1C,6FAWF,cAAC,IAAD,CACE+B,QAAS,CAAElG,KAAM,EAAGC,GAAI,EAAGkG,GAAI,EAAGF,GAAI,GACtCG,SAAU,CAAEpG,KAAM,GAAIiG,GAAI,IAC1BI,SAAU,GACV5D,GAAI,GAJN,SAMGqD,EAASnD,KAAI,SAACnE,EAAGoE,GAAJ,OACZ,cAAC,GAAD,CAAyBzE,KAAMK,GAAToE,iBCsCrB0D,GArFS,SAACf,GAAkB,IAAD,EACK7H,cAArCC,EADgC,EAChCA,SAAUyE,EADsB,EACtBA,SAAUxE,EADY,EACZA,aADY,EAEVG,oBAAkB,GAFR,mBAEjCC,EAFiC,KAExBC,EAFwB,KAGlCwG,EAAQN,MACRrC,EAAcC,YAAkBN,GAChCsE,EAAchE,YAAkB6D,IAEtC5D,qBAAU,WACRI,EAAS,eAAgBmD,EAAMgB,QAAQC,cACvCpE,EAAS,gBAAiBmD,EAAMgB,QAAQE,eACxCrE,EAAS,eAAgBmD,EAAMgB,QAAQG,cACvCtE,EAAS,gBAAiBmD,EAAMgB,QAAQI,iBACvC,CAACpB,EAAMgB,UA2BV,OACE,mCACE,uBAAMrI,SAAUN,GA3ByB,SAAAO,GAC3CE,IAAMuI,IAAN,mBAAsBrB,EAAMgB,QAAQnB,IAAMjH,GACvCI,MAAK,WACJgH,EAAMT,UACN7G,GAAW,GAEXwG,EAAM,CACJM,SAAU,eACVC,OAAQ,kBACN,cAAC,EAAD,OAIJ3G,IAAM4D,IAAI,YACT1D,MAAK,SAAAC,GAAC,OAAIuH,EAAYvH,EAAEL,SACxBS,OAAM,WACLkD,GAAY,SAGflD,OAAM,SAACJ,GACNC,QAAQC,IAAIF,EAAE8D,UACdrE,GAAW,SAMb,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAUkB,QAAS,EAAnB,UACE,eAAC,IAAD,CAAgBU,GAAG,aAAnB,UACE,cAAC,IAAD,iCACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,qBAGrC,eAAC,IAAD,CAAgBkC,GAAG,gBAAnB,UACE,cAAC,IAAD,iCACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,sBAGrC,eAAC,IAAD,CAAgBkC,GAAG,eAAnB,UACE,cAAC,IAAD,qBACE,eAAC,IAAD,2BAAelC,EAAS,iBAAxB,cACE,wBAAQiD,MAAM,SAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,UAAd,4BAIN,eAAC,IAAD,CAAgBf,GAAG,gBAAnB,UACE,cAAC,IAAD,qBACA,cAAC,IAAD,aAAUC,KAAK,QAAWnC,EAAS,sBAEpCK,GAAW,cAAC,IAAD,CAASyB,MAAM,UAAf,+EAGhB,eAAC,IAAD,WACE,cAAC,IAAD,CACEK,KAAK,SACL+C,YAAY,OACZkB,GAAI,EAHN,0BAOA,cAAC,IAAD,CAAWvB,QAAQ,QAAQyC,QAASM,EAAMT,QAA1C,yCCkEK+B,GAnJQ,WAAO,IACtBhH,EAAOiH,cAAPjH,GADqB,EAEK8B,YAAeiE,IAFpB,mBAEpBE,EAFoB,KAEVC,EAFU,KAGrBjE,EAAcC,YAAkBN,GAHX,EAKS0C,MAA5BS,EALmB,EAKnBA,OAAQC,EALW,EAKXA,OAAQC,EALG,EAKHA,QALG,EAMepH,YAAqB,CAC7DwE,cAAe,CACb,SAAY,EACZ,cAAiB,GACjB,aAAgB,GAChB,aAAgB,SAChB,cAAiB,MANbvE,EANmB,EAMnBA,SAAUC,EANS,EAMTA,aAAcyE,EANL,EAMKA,MANL,EAgBHtE,mBAAiC,CACvDqH,GAAI,EACJO,WAAY,GACZF,eAAgB,GAChBK,SAAU,KApBe,mBAgBpBiB,EAhBoB,KAgBdC,EAhBc,KAuB3BhF,qBAAU,WACJ8D,EAASmB,OAAS,GACpBD,EAAQlB,EAASoB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,iBAAmB5F,QAEjD,CAACiG,IAEJ9D,qBAAU,WACR3D,IAAM4D,IAAI,YACP1D,MAAK,SAAAC,GAAC,OAAIuH,EAAYvH,EAAEL,SACxBS,OAAM,WACLkD,GAAY,QAEf,IAEH,IAAM5D,EAAWN,GAAa,SAAAO,GAC5BA,EAAKiJ,SAAWvG,OAAM,OAACkG,QAAD,IAACA,OAAD,EAACA,EAAM3B,IAC7B/G,IAAMC,KAAN,mBAAuBH,EAAKiJ,UAAYjJ,GACrCI,MAAK,WACJ8D,IACAhE,IAAM4D,IAAI,YACP1D,MAAK,SAAAC,GAAC,OAAIuH,EAAYvH,EAAEL,SACxBS,OAAM,WACLkD,GAAY,SAGjBlD,OAAM,SAAAJ,GACLC,QAAQC,IAAIF,EAAE8D,gBAjDO,EAqDHvE,mBAAsB,CAC5C,GAAM,EACN,SAAY,EACZ,cAAiB,GACjB,aAAgB,GAChB,aAAgB,SAChB,cAAiB,KA3DQ,mBAqDpBsJ,EArDoB,KAqDdC,EArDc,KA8D3B,OACE,qCACE,eAAC,IAAD,CACE/E,KAAK,KADP,iBAEEwE,QAFF,IAEEA,OAFF,EAEEA,EAAMpB,WAFR,kBAIA,sBAAMzH,SAAUA,EAAhB,SACE,eAAC,IAAD,CACEsE,QAAQ,UACRC,GAAI,EAFN,UAIE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,iCACA,cAAC,IAAD,qDACA,cAAC,IAAD,qBACA,cAAC,IAAD,qBACA,cAAC,IAAD,gCAGJ,eAAC,IAAD,YACO,OAAJsE,QAAI,IAAJA,OAAA,EAAAA,EAAMjB,UAAN,OACCiB,QADD,IACCA,OADD,EACCA,EAAMjB,SAASnD,KAAI,SAACnE,EAAGoE,GACrB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAQpE,EAAEgI,eACV,cAAC,IAAD,UAAQhI,EAAEiI,gBACV,cAAC,IAAD,UAAQjI,EAAEkI,eACV,cAAC,IAAD,UAAQlI,EAAEmI,gBACV,cAAC,IAAD,UACE,eAAC,IAAD,CACE5G,UAAU,MACVZ,QAAS,EAFX,UAIE,cAAC,IAAD,CACE0D,YAAY,OACZC,aAAW,OACXmC,QAAS,WACPqC,EAAQ9I,GACRqG,KAEF9B,KAAM,cAAC,IAAD,MAER,cAAC,IAAD,CACEF,YAAY,MACZC,aAAW,SACXC,KAAM,cAAC,IAAD,aAtBFH,MA6BhB,cAAC,IAAD,UAAO,cAAC,IAAD,CAAOF,QAAS,EAAhB,gEACT,eAAC,IAAD,WACE,cAAC,IAAD,UAAO,cAAC,IAAD,aAAU5C,KAAK,QAAWnC,EAAS,oBAC1C,cAAC,IAAD,UAAO,cAAC,IAAD,aAAUmC,KAAK,QAAWnC,EAAS,qBAC1C,cAAC,IAAD,UACE,eAAC,IAAD,2BAAeA,EAAS,iBAAxB,cACE,wBAAQiD,MAAM,SAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,UAAd,2BAGJ,cAAC,IAAD,UAAO,cAAC,IAAD,aAAUd,KAAK,QAAWnC,EAAS,qBAC1C,cAAC,IAAD,UACE,cAAC,IAAD,CAAWmC,KAAK,SAAhB,uCAOV,eAAC,IAAD,CAAU8E,OAAQA,EAAQE,QAASA,EAAnC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,GAAD,CAAiByB,QAASc,EAAMvC,QAASA,IACzC,cAAC,IAAD,cCrIKyC,GAbM,WAEnB,OADiBC,YAAe/F,GAEvB,cAAC,IAAD,CAAUoC,GAAG,SAASlF,SAAO,IAIpC,mCACE,cAAC,IAAD,OC8DS2E,GA9DoB,CACjC,CACE,KAAQ,2BACR,KAAQ,SACR,UAAa,cAAC,EAAD,IACb,KAAQ,KACR,SAAY,MAEd,CACE,KAAQ,KACR,KAAQ,KACR,UAAa,cAAC,GAAD,IACb,KAAQ,KACR,SAAY,CACV,CACE,KAAQ,KACR,KAAQ,KACR,UAAa,cAAC,EAAD,IACb,KAAQ,KACR,SAAY,CACV,CACE,KAAQ,6CACR,KAAQ,IACR,UAAa,cAAC,EAAD,IACb,KAAQ,cAAC,IAAD,IACR,SAAY,MAEd,CACE,KAAQ,iCACR,KAAQ,WACR,UAAa,cAAC,GAAD,IACb,KAAQ,cAAC,IAAD,IACR,SAAY,MAEd,CACE,KAAQ,gDACR,KAAQ,eACR,UAAa,cAAC,GAAD,IACb,KAAQ,KACR,SAAY,MAEd,CACE,KAAQ,2BACR,KAAQ,kBACR,UAAa,cAAC,EAAD,IACb,KAAQ,cAAC,IAAD,IACR,SAAY,MAGd,CACE,KAAQ,qBACR,KAAQ,iBACR,UAAa,cAAC,EAAD,IACb,KAAQ,cAAC,IAAD,IACR,SAAY,WC7BTmE,OAlCf,WACE,OACE,cAAC,IAAD,UACGnE,GAAaX,KAAI,SAAAnE,GAAM,IAAD,EACrB,OACE,mCACE,cAAC,IAAD,CAAO+E,KAAM/E,EAAE+E,KAAO/E,EAAE+E,KAAO,GAAImE,QAASlJ,EAAEmJ,UAA9C,mBAEEnJ,EAAEgF,gBAFJ,aAEE,EAAYb,KAAI,SAAAc,GAAO,IAAD,EACpB,OACE,mCACE,cAAC,IAAD,CAAOF,KAAME,EAAGF,KAAOE,EAAGF,KAAO,GAAImE,QAASjE,EAAGkE,UAAjD,mBAEIlE,EAAGD,gBAFP,aAEI,EAAab,KAAI,SAAAe,GACf,OACE,mCACE,cAAC,IAAD,CAAOH,KAAMG,EAAIH,KAAOG,EAAIH,KAAO,GAAImE,QAAShE,EAAIiE,kCCNnEC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvJ,MAAK,YAAkD,IAA/CwJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,oBCKCO,GAFDC,aAAY,CAAEC,OAVA,CAC1BC,oBAAoB,EACpBC,iBAAkB,SAQgBC,MALtB,CACZC,QAAS,eACTC,KAAM,kBCCRtK,IAAMuK,SAASC,QAAU,sCACzBxK,IAAMuK,SAASE,iBAAkB,EAEjCC,IAAS/D,OACP,cAAC,IAAMgE,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,KAAD,CAAgBZ,MAAOA,GAAvB,SACE,cAAC,GAAD,YAKRa,SAASC,eAAe,SAM1BtB,O","file":"static/js/main.64c0ff48.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Flex,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Stack,\r\n  Button,\r\n  Heading,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { useForm } from 'react-hook-form';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ntype AuthType = {\r\n  user: string\r\n  password: string\r\n}\r\n\r\nconst Login = () => {\r\n  const { register, handleSubmit } = useForm<AuthType>();\r\n  const navigate = useNavigate()\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n  \r\n  const onSubmit = handleSubmit(data => {\r\n    const auth = async () => {\r\n      await axios.post('login', data)\r\n        .then((e) => {\r\n          console.log(e.data)\r\n          setIsError(false)\r\n          navigate('/', { replace: true })\r\n        })\r\n        .catch(() => setIsError(true))\r\n    }\r\n    auth()\r\n  })\r\n\r\n  return (\r\n    <Flex\r\n      minH={'100vh'}\r\n      align={'center'}\r\n      justify={'center'}\r\n      bg={useColorModeValue('gray.50', 'gray.800')}>\r\n      <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\r\n        <Stack align={'center'}>\r\n          <Heading fontSize={'4xl'}>Sign in to your account</Heading>\r\n          <Text fontSize={'lg'} color={'gray.600'}>\r\n            Boomin Games Admin Control Room\r\n          </Text>\r\n        </Stack>\r\n        <form onSubmit={onSubmit}>\r\n          <Box\r\n            rounded={'lg'}\r\n            bg={useColorModeValue('white', 'gray.700')}\r\n            boxShadow={'lg'}\r\n            p={8}>\r\n            <Stack spacing={4}>\r\n              <FormControl id=\"User\">\r\n                <FormLabel>User ID</FormLabel>\r\n                <Input type=\"text\" {...register(\"user\")} />\r\n              </FormControl>\r\n              <FormControl id=\"password\">\r\n                <FormLabel>Password</FormLabel>\r\n                <Input type=\"password\" {...register(\"password\")} />\r\n              </FormControl>\r\n              <Stack spacing={10}>\r\n                <Stack\r\n                  direction={{ base: 'column', sm: 'row' }}\r\n                  align={'start'}\r\n                  justify={'space-between'}>\r\n                    {isError && <Text color={'red.600'}>Error</Text>}\r\n                </Stack>\r\n                <Button\r\n                  type=\"submit\"\r\n                  bg={'blue.400'}\r\n                  color={'white'}\r\n                  _hover={{\r\n                    bg: 'blue.500',\r\n                  }}>\r\n                  Sign in\r\n                </Button>\r\n              </Stack>\r\n            </Stack>\r\n          </Box>\r\n        </form>\r\n      </Stack>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import { atom } from \"recoil\";\r\n\r\nexport type CharacteristicStateType = {\r\n  name: string\r\n  conditions_parameter: 'hp'|'damage'\r\n\tconditions_value: number|string\r\n\tconditions_expression: '>'|'<'|'='\r\n\tto_whom: 'myself'|'all_allies'|'random_allies'|'all_enemies'|'ramdom_enemies'\r\n\tparameter: 'attack'|'defence'|'critical_rate'|'agility'|'hp'|'mp'\r\n\thappen: '+'|'-'|'='\r\n\thow_much: number|string\r\n}\r\n\r\nconst CharacteristicState = atom<CharacteristicStateType[]>({\r\n  key: 'CharacteristicState',\r\n  default: [],\r\n});\r\n\r\nexport default CharacteristicState","import { CharacteristicStateType } from \"../atoms/CharacteristicState\";\r\n\r\nconst paramFunc = (e: CharacteristicStateType['conditions_parameter']) => {\r\n    switch(e) {\r\n        case 'hp':\r\n            return '残りHPが'\r\n        case 'damage':\r\n            return '受けるダメージが最大HPの'\r\n    }\r\n}\r\n\r\nconst expressionFunc = (e: CharacteristicStateType['conditions_expression']) => {\r\n    switch(e) {\r\n        case '>':\r\n            return '以下のとき'\r\n        case '<':\r\n            return '以上のとき'\r\n        case '=':\r\n            return 'のとき'\r\n    }\r\n}\r\n\r\nconst toWhomFunc = (e: CharacteristicStateType['to_whom']) => {\r\n    switch(e) {\r\n        case 'myself':\r\n            return '自分'\r\n        case 'all_allies':\r\n            return '味方全体'\r\n        case 'random_allies':\r\n            return '味方単体'\r\n        case 'all_enemies':\r\n            return '敵全体'\r\n        case 'ramdom_enemies':\r\n            return '敵単体'\r\n    }\r\n}\r\n\r\nconst ParameterFunc = (e: CharacteristicStateType['parameter']) => {\r\n    switch(e) {\r\n        case 'attack':\r\n            return '攻撃力'\r\n        case 'defence':\r\n            return '防御力'\r\n        case 'critical_rate':\r\n            return 'クリティカル率'\r\n        case 'agility':\r\n            return '素早さ'\r\n        case 'hp':\r\n            return 'HP'\r\n        case 'mp':\r\n            return 'MP'\r\n    }\r\n}\r\n\r\nconst HappenFunc = (e: CharacteristicStateType['happen']) => {\r\n    switch(e) {\r\n        case '+':\r\n            return '増加させる'\r\n        case '-':\r\n            return '減少させる'\r\n        case '=':\r\n            return 'にする'\r\n    }\r\n}\r\n\r\nconst ConvertToText = (data:CharacteristicStateType):string => {\r\n    console.log(data)\r\n    const param = paramFunc(data.conditions_parameter)\r\n    const value = String(data.conditions_value)\r\n    const expression = expressionFunc(data.conditions_expression)\r\n    const to_whom = toWhomFunc(data.to_whom)\r\n    const parameter = ParameterFunc(data.parameter)\r\n    const how_much = String(data.how_much)\r\n    const happen = HappenFunc(data.happen)\r\n\r\n    const result = `${param}${value}%${expression}、${to_whom}の${parameter}を${how_much}${happen}`\r\n\r\n    return result\r\n}\r\n\r\nexport default ConvertToText","import { atom } from \"recoil\";\r\n\r\nconst IsRedirect = atom<boolean>({\r\n  key: 'IsRedirect',\r\n  default: false,\r\n});\r\n\r\nexport default IsRedirect","import React, { useEffect } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport * as Icon from \"react-icons/ri\"\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport CharacteristicState, { CharacteristicStateType } from '../atoms/CharacteristicState';\r\nimport { useForm } from 'react-hook-form';\r\nimport ConvertToText from '../utils/Characteristic';\r\nimport IsRedirect from '../atoms/IsRedirect';\r\nimport axios from 'axios';\r\n\r\nconst Characteristic = () => {\r\n  const [characteristics, setCharacteristics] = useRecoilState(CharacteristicState);\r\n  const setRedirect = useSetRecoilState(IsRedirect)\r\n\r\n  useEffect(() => {\r\n    axios.get('characteristic')\r\n      .then(e => setCharacteristics(e.data))\r\n      .catch(() => {\r\n        setRedirect(true)\r\n      })\r\n  }, [])\r\n\r\n  const { register, setValue, handleSubmit, reset } = useForm<CharacteristicStateType>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      conditions_parameter: 'hp',\r\n      conditions_value: 0,\r\n      conditions_expression: '>',\r\n      to_whom: 'myself',\r\n      parameter: 'attack',\r\n      happen: '+',\r\n      how_much: 0,\r\n    }\r\n  });\r\n\r\n  const onSubmit = handleSubmit(data => {\r\n    data.conditions_value = String(data.conditions_value)\r\n    data.how_much = String(data.how_much)\r\n    \r\n    setCharacteristics([...characteristics, data])\r\n    axios.post(`characteristic`, data)\r\n      .then(() => {\r\n        reset()\r\n        axios.get('characteristic')\r\n          .then(e => setCharacteristics(e.data))\r\n          .catch(() => {\r\n            setRedirect(true)\r\n          })\r\n      })\r\n      .catch(e => {\r\n        console.log(e.response)\r\n      })\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <UI.Heading\r\n        size=\"md\"\r\n      >特技管理</UI.Heading>\r\n      <form onSubmit={onSubmit}>\r\n        <UI.Table\r\n          variant=\"striped\"\r\n          mt={4}\r\n        >\r\n          <UI.Thead>\r\n            <UI.Tr>\r\n              <UI.Th>技名</UI.Th>\r\n              <UI.Th colSpan={7}>効果</UI.Th>\r\n              <UI.Th>操作</UI.Th>\r\n            </UI.Tr>\r\n          </UI.Thead>\r\n          <UI.Tbody>\r\n            {\r\n              characteristics.map((e, i) => {\r\n                return (\r\n                  <UI.Tr key={i}>\r\n                    <UI.Td>{e.name}</UI.Td>\r\n                    <UI.Td colSpan={7}>{ConvertToText(e)}</UI.Td>\r\n                    <UI.Td>\r\n                      <UI.Stack\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <UI.IconButton\r\n                          colorScheme=\"blue\"\r\n                          aria-label=\"Edit\"\r\n                          icon={<Icon.RiEdit2Fill />}\r\n                        />\r\n                        <UI.IconButton\r\n                          colorScheme=\"red\"\r\n                          aria-label=\"Delete\"\r\n                          icon={<Icon.RiDeleteBin6Fill />}\r\n                        />\r\n                      </UI.Stack>\r\n                    </UI.Td>\r\n                  </UI.Tr>\r\n                )\r\n              })\r\n            }\r\n            <UI.Tr>\r\n              <UI.Td><UI.Input type=\"text\" {...register(\"name\")} /></UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"conditions_parameter\")} >\r\n                  <option value=\"hp\">体力</option>\r\n                  <option value=\"damage\">ダメージ</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Flex alignItems=\"flex-end\">\r\n                  <UI.NumberInput onChange={e => setValue(\"conditions_value\", Number(e))}>\r\n                    <UI.NumberInputField />\r\n                  </UI.NumberInput>\r\n                  <UI.Text>%</UI.Text>\r\n                </UI.Flex>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"conditions_expression\")} >\r\n                  <option value=\">\">以下</option>\r\n                  <option value=\"<\">以上</option>\r\n                  <option value=\"=\">に</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"to_whom\")} >\r\n                  <option value=\"myself\">自分に</option>\r\n                  <option value=\"all_allies\">味方全体に</option>\r\n                  <option value=\"random_allies\">ランダムで味方単体に</option>\r\n                  <option value=\"all_enemies\">相手全体に</option>\r\n                  <option value=\"ramdom_enemies\">ランダムで相手単体に</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"parameter\")} >\r\n                  <option value=\"attack\">攻撃力</option>\r\n                  <option value=\"defence\">防御力</option>\r\n                  <option value=\"critical_rate\">クリティカル率</option>\r\n                  <option value=\"agility\">素早さ</option>\r\n                  <option value=\"hp\">HP</option>\r\n                  <option value=\"mp\">MP</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.NumberInput onChange={e => setValue(\"how_much\", Number(e))}>\r\n                  <UI.NumberInputField />\r\n                </UI.NumberInput>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"happen\")} >\r\n                  <option value=\"+\">アップ</option>\r\n                  <option value=\"-\">ダウン</option>\r\n                  <option value=\"=\">に</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td>\r\n                <UI.Button type=\"submit\">追加</UI.Button>\r\n              </UI.Td>\r\n            </UI.Tr>\r\n          </UI.Tbody>\r\n        </UI.Table>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Characteristic\r\n","import { atom } from \"recoil\";\r\n\r\nexport type AdministratorStateType = {\r\n  ID: number\r\n  user: string\r\n  CreatedAt: string\r\n}\r\n\r\nconst AdministratorState = atom<AdministratorStateType[]>({\r\n  key: 'AdministratorState',\r\n  default: [],\r\n});\r\n\r\nexport default AdministratorState","import React from 'react'\r\nimport { Outlet } from 'react-router'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport RouterConfig from '../../config/RouterConfig'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <UI.Flex>\r\n      <UI.Box\r\n        h=\"100vh\"\r\n        py={16}\r\n        px={4}\r\n        bg=\"gray.700\"\r\n      >\r\n        <UI.Stack spacing={8}>\r\n          {RouterConfig.map(e => {\r\n            return (\r\n            <>{e.path !== \"/login\" && e.children?.map(el => {\r\n              return (\r\n                <>{el.children?.map(elm => (\r\n                  <>{elm.icon && \r\n                    <UI.Tooltip\r\n                      label={elm.name}\r\n                      placement=\"right\"\r\n                    >\r\n                      <NavLink\r\n                        to={`${elm.path}`}\r\n                      >\r\n                        <UI.Flex\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                        >\r\n                          <UI.Box\r\n                            mr={3}\r\n                            fontSize=\"22px\"\r\n                            color=\"white\"\r\n                          >\r\n                            {elm.icon}\r\n                          </UI.Box>\r\n                        </UI.Flex>\r\n                      </NavLink>\r\n                    </UI.Tooltip>\r\n                    }\r\n                  </>))\r\n                }</>\r\n              )})\r\n            }</>\r\n          )})}\r\n        </UI.Stack>\r\n      </UI.Box>\r\n      <UI.Box\r\n        flex={1}\r\n        p={8}\r\n      >\r\n        <Outlet />\r\n      </UI.Box>\r\n    </UI.Flex>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport { RiCheckboxCircleFill } from 'react-icons/ri'\r\nimport * as UI from \"@chakra-ui/react\"\r\n\r\nconst Toast = () => {\r\n  return (\r\n    <UI.Flex\r\n      maxW=\"sm\"\r\n      w=\"full\"\r\n      mx=\"auto\"\r\n      bg={UI.useColorModeValue(\"white\", \"gray.800\")}\r\n      shadow=\"md\"\r\n      rounded=\"lg\"\r\n      overflow=\"hidden\"\r\n    >\r\n      <UI.Flex justifyContent=\"center\" alignItems=\"center\" w={12} bg=\"green.500\">\r\n        <RiCheckboxCircleFill color=\"white\" />\r\n      </UI.Flex>\r\n\r\n      <UI.Box mx={-3} py={2} px={4}>\r\n        <UI.Box mx={3}>\r\n          <UI.chakra.span\r\n            color={UI.useColorModeValue(\"green.500\", \"green.400\")}\r\n            fontWeight=\"bold\"\r\n          >\r\n            Success\r\n          </UI.chakra.span>\r\n          <UI.chakra.p\r\n            color={UI.useColorModeValue(\"gray.600\", \"gray.200\")}\r\n            fontSize=\"sm\"\r\n          >\r\n            The process has been completed successfully.\r\n          </UI.chakra.p>\r\n        </UI.Box>\r\n      </UI.Box>\r\n    </UI.Flex>\r\n  )\r\n}\r\n\r\nexport default Toast\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport axios from 'axios'\r\nimport * as Icon from \"react-icons/ri\";\r\nimport AdministratorState from '../atoms/AdministratorState'\r\nimport { useRecoilState, useSetRecoilState } from 'recoil'\r\nimport IsRedirect from '../atoms/IsRedirect';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Toast } from './template';\r\n\r\ntype AuthType = {\r\n  user: string\r\n  password: string\r\n  password_confirm: string\r\n}\r\n\r\nconst Administrator = () => {\r\n  const toast = UI.useToast()\r\n  const [admin, setAdmin] = useRecoilState(AdministratorState)\r\n  const setRedirect = useSetRecoilState(IsRedirect)\r\n\r\n  useEffect(() => {\r\n    axios.get('/admins')\r\n      .then(e => {\r\n        setAdmin(e.data)\r\n      })\r\n      .catch(() => {\r\n        setRedirect(true)\r\n      })\r\n  }, [])\r\n\r\n  const { isOpen, onOpen, onClose } = UI.useDisclosure()\r\n\r\n  const { register, handleSubmit } = useForm<AuthType>()\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n  \r\n  const onSubmit = handleSubmit(data => {\r\n    const auth = async () => {\r\n      await axios.post('register', data)\r\n        .then(() => {\r\n          onClose()\r\n          setIsError(false)\r\n          \r\n          toast({\r\n            position: \"bottom-right\",\r\n            render: () => (\r\n              <Toast />\r\n            )\r\n          })\r\n\r\n          axios.get('/admins')\r\n            .then(e => {\r\n              setAdmin(e.data)\r\n            })\r\n            .catch(() => {\r\n              setRedirect(true)\r\n            })\r\n        })\r\n        .catch((e) => {\r\n          console.log(e.response)\r\n          setIsError(true)\r\n        })\r\n    }\r\n    auth()\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <UI.Heading\r\n        size=\"md\"\r\n      >管理者一覧</UI.Heading>\r\n      \r\n      <UI.Flex>\r\n        <UI.Spacer />\r\n        <UI.Button onClick={onOpen}>管理者アカウント追加</UI.Button>\r\n      </UI.Flex>\r\n\r\n      <UI.Table\r\n        mt={4}\r\n        variant=\"striped\"\r\n      >\r\n        <UI.Thead>\r\n          <UI.Tr>\r\n            <UI.Th>ユーザー名</UI.Th>\r\n            <UI.Th>作成日</UI.Th>\r\n            <UI.Th>操作</UI.Th>\r\n          </UI.Tr>\r\n        </UI.Thead>\r\n        <UI.Tbody>\r\n          {admin.map(e => {\r\n            return (\r\n              <UI.Tr key={e.ID}>\r\n                <UI.Td>{e.user}</UI.Td>\r\n                <UI.Td>{e.CreatedAt}</UI.Td>\r\n                <UI.Td>\r\n                  <UI.Stack\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                  >\r\n                    <UI.IconButton\r\n                      colorScheme=\"blue\"\r\n                      aria-label=\"Edit\"\r\n                      icon={<Icon.RiEdit2Fill />}\r\n                    />\r\n                    <UI.IconButton\r\n                      colorScheme=\"red\"\r\n                      aria-label=\"Delete\"\r\n                      icon={<Icon.RiDeleteBin6Fill />}\r\n                    />\r\n                  </UI.Stack>\r\n                </UI.Td>\r\n              </UI.Tr>\r\n            )\r\n          })}\r\n        </UI.Tbody>\r\n      </UI.Table>\r\n\r\n      <UI.Modal isOpen={isOpen} onClose={onClose}>\r\n        <UI.ModalOverlay />\r\n        <UI.ModalContent>\r\n          <UI.ModalHeader>UI.Modal Title</UI.ModalHeader>\r\n          <UI.ModalCloseButton />\r\n          <UI.ModalBody>\r\n            <form onSubmit={onSubmit}>\r\n              <UI.Box\r\n                p={8}>\r\n                <UI.Stack spacing={4}>\r\n                  <UI.FormControl id=\"User\">\r\n                    <UI.FormLabel>User ID</UI.FormLabel>\r\n                    <UI.Input type=\"text\" {...register(\"user\")} />\r\n                  </UI.FormControl>\r\n                  <UI.FormControl id=\"password\">\r\n                    <UI.FormLabel>Password</UI.FormLabel>\r\n                    <UI.Input type=\"password\" {...register(\"password\")} />\r\n                  </UI.FormControl>\r\n                  <UI.FormControl id=\"password_comfirm\">\r\n                    <UI.FormLabel>Password_comfirm</UI.FormLabel>\r\n                    <UI.Input type=\"password\" {...register(\"password_confirm\")} />\r\n                  </UI.FormControl>\r\n                  <UI.Stack spacing={10}>\r\n                    <UI.Stack\r\n                      direction={{ base: 'column', sm: 'row' }}\r\n                      align={'start'}\r\n                      justify={'space-between'}>\r\n                        {isError && <UI.Text color={'red.600'}>Error</UI.Text>}\r\n                    </UI.Stack>\r\n                    <UI.Button\r\n                      type=\"submit\"\r\n                      bg={'blue.400'}\r\n                      color={'white'}\r\n                      _hover={{\r\n                        bg: 'blue.500',\r\n                      }}>\r\n                      Create new account\r\n                    </UI.Button>\r\n                  </UI.Stack>\r\n                </UI.Stack>\r\n              </UI.Box>\r\n            </form>\r\n          </UI.ModalBody>\r\n\r\n          <UI.ModalFooter>\r\n            <UI.Button variant=\"ghost\" onClick={onClose}>Cancel</UI.Button>\r\n          </UI.ModalFooter>\r\n        </UI.ModalContent>\r\n      </UI.Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Administrator\r\n","import React, { useState } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport axios from 'axios';\r\nimport { Toast } from '../template';\r\n\r\ntype GroupType = {\r\n  group_name: string\r\n  group_category: string\r\n}\r\n\r\nconst CreateGroup = () => {\r\n  const { isOpen, onOpen, onClose } = UI.useDisclosure()\r\n  const toast = UI.useToast()\r\n\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n\r\n  const { register, handleSubmit } = useForm<GroupType>();\r\n  const onSubmit: SubmitHandler<GroupType> = data => {\r\n    axios.post('settings', data)\r\n      .then(() => {\r\n        onClose()\r\n        setIsError(false)\r\n        \r\n        toast({\r\n          position: \"bottom-right\",\r\n          render: () => (\r\n            <Toast />\r\n          )\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        console.log(e.response)\r\n        setIsError(true)\r\n      })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UI.Button onClick={onOpen}>新規グループ作成</UI.Button>\r\n\r\n      <UI.Modal isOpen={isOpen} onClose={onClose}>\r\n        <UI.ModalOverlay />\r\n        <UI.ModalContent>\r\n          <UI.ModalHeader>UI.Modal Title</UI.ModalHeader>\r\n          <UI.ModalCloseButton />\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <UI.ModalBody>\r\n                <UI.Stack spacing={4}>\r\n                  <UI.FormControl id=\"group_name\">\r\n                    <UI.FormLabel>Group Name</UI.FormLabel>\r\n                    <UI.Input type=\"text\" {...register(\"group_name\")} />\r\n                    <UI.FormHelperText>グループ名（例：ステータス関係）</UI.FormHelperText>\r\n                  </UI.FormControl>\r\n      \r\n                  <UI.FormControl id=\"group_category\">\r\n                    <UI.FormLabel>Group Category</UI.FormLabel>\r\n                    <UI.Input type=\"text\" {...register(\"group_category\")} />\r\n                    <UI.FormHelperText>グループスラッグ ユニークな英語（例：parameter）</UI.FormHelperText>\r\n                  </UI.FormControl>\r\n                  {isError && <UI.Text color=\"red.600\">作成に失敗しました。</UI.Text>}\r\n                </UI.Stack>\r\n              </UI.ModalBody>\r\n              <UI.ModalFooter>\r\n                <UI.Button\r\n                  type=\"submit\"\r\n                  colorScheme=\"blue\"\r\n                  mr={3}\r\n                >\r\n                  作成\r\n                </UI.Button>\r\n                <UI.Button variant=\"ghost\" onClick={onClose}>閉じる</UI.Button>\r\n              </UI.ModalFooter>\r\n            </form>\r\n        </UI.ModalContent>\r\n      </UI.Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateGroup\r\n","import React from 'react'\r\nimport * as UI from '@chakra-ui/react'\r\nimport { SettingGroup } from '../../atoms/SettingsState'\r\nimport { RiSettings3Fill } from 'react-icons/ri'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\ntype Props = {\r\n  \"data\": SettingGroup\r\n}\r\n\r\nconst SettingListItem = (props: Props) => {\r\n  const navigate = useNavigate()\r\n  \r\n  return (\r\n    <>\r\n      <UI.LinkBox>\r\n        <UI.Box>\r\n          <UI.Flex\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            w={8}\r\n            h={8}\r\n            mb={4}\r\n            rounded=\"full\"\r\n            color={UI.useColorModeValue(`gray.600`, `gray.100`)}\r\n            bg={UI.useColorModeValue(`gray.100`, `gray.600`)}\r\n          >\r\n            <RiSettings3Fill />\r\n          </UI.Flex>\r\n          <UI.LinkOverlay onClick={() => {\r\n            navigate(`/setting/${props.data.group_category}`)\r\n          }}>\r\n            <UI.Heading\r\n              mb={2}\r\n              size=\"md\"\r\n              lineHeight=\"shorter\"\r\n              color={UI.useColorModeValue(\"gray.900\", \"white.900\")}\r\n            >\r\n              {props.data.group_name}\r\n            </UI.Heading>\r\n          </UI.LinkOverlay>\r\n          <UI.Text\r\n            fontSize=\"sm\"\r\n            color={UI.useColorModeValue(\"gray.500\", \"gray.300\")}\r\n          >\r\n            {props.data.group_name}の設定画面\r\n          </UI.Text>\r\n        </UI.Box>\r\n      </UI.LinkBox>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingListItem\r\n","import { atom } from \"recoil\";\r\n\r\nexport type SettingGroup = {\r\n  ID: number\r\n  group_name: string\r\n  group_category: string\r\n  settings: SettingType[]\r\n}\r\n\r\nexport type SettingType = {\r\n  ID: number\r\n  group_id: string|number|undefined\r\n  setting_name: string\r\n  setting_label: string\r\n  setting_value: string\r\n  setting_type: 'string'|'int'|'number'\r\n}\r\n\r\nconst SettingState = atom<SettingGroup[]>({\r\n  key: 'SettingState',\r\n  default: [],\r\n});\r\n\r\nexport default SettingState","import React, { useEffect } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport { CreateGroup, SettingListItem } from './Settings'\r\nimport axios from 'axios'\r\nimport { useRecoilState, useSetRecoilState } from 'recoil'\r\nimport SettingState from '../atoms/SettingsState'\r\nimport IsRedirect from '../atoms/IsRedirect'\r\n\r\nconst Setting = () => {\r\n  const [settings, setSettings] = useRecoilState(SettingState)\r\n  const setRedirect = useSetRecoilState(IsRedirect)\r\n\r\n  useEffect(() => {\r\n    axios.get('settings')\r\n      .then(e => setSettings(e.data))\r\n      .catch(() => {\r\n        setRedirect(true)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <UI.Heading\r\n        size=\"md\"\r\n      >ゲーム設定</UI.Heading>\r\n\r\n      <UI.Flex>\r\n        <UI.Spacer />\r\n        <CreateGroup />\r\n      </UI.Flex>\r\n\r\n      <UI.Flex\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        py={8}\r\n      >\r\n        <UI.Box\r\n          px={8}\r\n          py={20}\r\n          mx=\"auto\"\r\n        >\r\n          <UI.Box textAlign=\"center\">\r\n            <UI.Heading fontWeight=\"extrabold\">各種設定</UI.Heading>\r\n            <UI.Text\r\n              mt={4}\r\n              maxW=\"2xl\"\r\n              fontSize=\"xl\"\r\n              mx={{ lg: \"auto\" }}\r\n              color={UI.useColorModeValue(\"gray.500\", \"gray.400\")}\r\n            >\r\n              Boomin Fighters の各種設定ページです\r\n            </UI.Text>\r\n          </UI.Box>\r\n\r\n          <UI.SimpleGrid\r\n            columns={{ base: 1, sm: 2, md: 3, lg: 4 }}\r\n            spacingX={{ base: 16, lg: 24 }}\r\n            spacingY={20}\r\n            mt={12}\r\n          >\r\n            {settings.map((e, i) => (\r\n              <SettingListItem key={i} data={e} />\r\n            ))}\r\n          </UI.SimpleGrid>\r\n        </UI.Box>\r\n      </UI.Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Setting\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport { SubmitHandler, useForm } from 'react-hook-form';\r\nimport SettingState, { SettingType } from '../../atoms/SettingsState';\r\nimport axios from 'axios';\r\nimport { Toast } from '../template';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport IsRedirect from '../../atoms/IsRedirect';\r\n\r\ntype Props = {\r\n  onClose: any\r\n  setting: SettingType\r\n}\r\n\r\nconst SettingItemEdit = (props: Props) => {\r\n  const { register, setValue, handleSubmit } = useForm<SettingType>();\r\n  const [isError, setIsError] = useState<boolean>(false)\r\n  const toast = UI.useToast()\r\n  const setRedirect = useSetRecoilState(IsRedirect)\r\n  const setSettings = useSetRecoilState(SettingState)\r\n\r\n  useEffect(() => {\r\n    setValue(\"setting_name\", props.setting.setting_name)\r\n    setValue(\"setting_label\", props.setting.setting_label)\r\n    setValue(\"setting_type\", props.setting.setting_type)\r\n    setValue(\"setting_value\", props.setting.setting_value)\r\n  }, [props.setting])\r\n\r\n  const onSubmit: SubmitHandler<SettingType> = data => {\r\n    axios.put(`settings/${props.setting.ID}`, data)\r\n      .then(() => {\r\n        props.onClose()\r\n        setIsError(false)\r\n        \r\n        toast({\r\n          position: \"bottom-right\",\r\n          render: () => (\r\n            <Toast />\r\n          )\r\n        })\r\n        \r\n        axios.get('settings')\r\n        .then(e => setSettings(e.data))\r\n        .catch(() => {\r\n          setRedirect(true)\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        console.log(e.response)\r\n        setIsError(true)\r\n      })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <UI.ModalBody>\r\n          <UI.Stack spacing={4}>\r\n            <UI.FormControl id=\"group_name\">\r\n              <UI.FormLabel>設定名</UI.FormLabel>\r\n              <UI.Input type=\"text\" {...register(\"setting_name\")} />\r\n            </UI.FormControl>\r\n\r\n            <UI.FormControl id=\"setting_label\">\r\n              <UI.FormLabel>カラム</UI.FormLabel>\r\n              <UI.Input type=\"text\" {...register(\"setting_label\")} />\r\n            </UI.FormControl>\r\n\r\n            <UI.FormControl id=\"setting_type\">\r\n              <UI.FormLabel>型</UI.FormLabel>\r\n                <UI.Select {...register(\"setting_type\")} >\r\n                  <option value=\"string\">String</option>\r\n                  <option value=\"int\">Number</option>\r\n                  <option value=\"boolean\">Boolean</option>\r\n                </UI.Select>\r\n            </UI.FormControl>\r\n\r\n            <UI.FormControl id=\"setting_value\">\r\n              <UI.FormLabel>値</UI.FormLabel>\r\n              <UI.Input type=\"text\" {...register(\"setting_value\")} />\r\n            </UI.FormControl>\r\n            {isError && <UI.Text color=\"red.600\">更新に失敗しました。</UI.Text>}\r\n          </UI.Stack>\r\n        </UI.ModalBody>\r\n        <UI.ModalFooter>\r\n          <UI.Button\r\n            type=\"submit\"\r\n            colorScheme=\"blue\"\r\n            mr={3}\r\n          >\r\n            作成\r\n          </UI.Button>\r\n          <UI.Button variant=\"ghost\" onClick={props.onClose}>閉じる</UI.Button>\r\n        </UI.ModalFooter>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingItemEdit\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as UI from \"@chakra-ui/react\"\r\nimport axios from 'axios'\r\nimport { useRecoilState, useSetRecoilState } from 'recoil'\r\nimport IsRedirect from '../atoms/IsRedirect'\r\nimport SettingState, { SettingGroup, SettingType } from '../atoms/SettingsState'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\nimport * as Icon from \"react-icons/ri\"\r\nimport SettingItemEdit from './Settings/SettingItemEdit'\r\n\r\nconst SettingsDetail = () => {\r\n  let { id } = useParams();\r\n  const [settings, setSettings] = useRecoilState(SettingState)\r\n  const setRedirect = useSetRecoilState(IsRedirect)\r\n\r\n  const { isOpen, onOpen, onClose } = UI.useDisclosure()\r\n  const { register, handleSubmit, reset } = useForm<SettingType>({\r\n    defaultValues: {\r\n      \"group_id\": 0,\r\n      \"setting_label\": \"\",\r\n      \"setting_name\": \"\",\r\n      \"setting_type\": \"string\",\r\n      \"setting_value\": \"\",\r\n    }\r\n  });\r\n  \r\n  const [item, setItem] = useState<SettingGroup|undefined>({\r\n    ID: 0,\r\n    group_name: \"\",\r\n    group_category: \"\",\r\n    settings: [],\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (settings.length > 0) {\r\n      setItem(settings.find(f => f.group_category === id))\r\n    }\r\n  }, [settings])\r\n\r\n  useEffect(() => {\r\n    axios.get('settings')\r\n      .then(e => setSettings(e.data))\r\n      .catch(() => {\r\n        setRedirect(true)\r\n      })\r\n  }, [])\r\n  \r\n  const onSubmit = handleSubmit(data => {\r\n    data.group_id = String(item?.ID)\r\n    axios.post(`settings/${data.group_id}`, data)\r\n      .then(() => {\r\n        reset()\r\n        axios.get('settings')\r\n          .then(e => setSettings(e.data))\r\n          .catch(() => {\r\n            setRedirect(true)\r\n          })\r\n      })\r\n      .catch(e => {\r\n        console.log(e.response)\r\n      })\r\n  })\r\n\r\n  const [edit, setEdit] = useState<SettingType>({\r\n    \"ID\": 0,\r\n    \"group_id\": 0,\r\n    \"setting_label\": \"\",\r\n    \"setting_name\": \"\",\r\n    \"setting_type\": \"string\",\r\n    \"setting_value\": \"\",\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <UI.Heading\r\n        size=\"md\"\r\n      >{item?.group_name}設定</UI.Heading>\r\n\r\n      <form onSubmit={onSubmit}>\r\n        <UI.Table\r\n          variant=\"striped\"\r\n          mt={4}\r\n        >\r\n          <UI.Thead>\r\n            <UI.Tr>\r\n              <UI.Th>設定名</UI.Th>\r\n              <UI.Th>カラム名(英語)</UI.Th>\r\n              <UI.Th>型</UI.Th>\r\n              <UI.Th>値</UI.Th>\r\n              <UI.Th>操作</UI.Th>\r\n            </UI.Tr>\r\n          </UI.Thead>\r\n          <UI.Tbody>\r\n            {item?.settings ?\r\n              item?.settings.map((e, i) => {\r\n                return (\r\n                  <UI.Tr key={i}>\r\n                    <UI.Td>{e.setting_name}</UI.Td>\r\n                    <UI.Td>{e.setting_label}</UI.Td>\r\n                    <UI.Td>{e.setting_type}</UI.Td>\r\n                    <UI.Td>{e.setting_value}</UI.Td>\r\n                    <UI.Td>\r\n                      <UI.Stack\r\n                        direction=\"row\"\r\n                        spacing={2}\r\n                      >\r\n                        <UI.IconButton\r\n                          colorScheme=\"blue\"\r\n                          aria-label=\"Edit\"\r\n                          onClick={() => {\r\n                            setEdit(e)\r\n                            onOpen()\r\n                          }}\r\n                          icon={<Icon.RiEdit2Fill />}\r\n                        />\r\n                        <UI.IconButton\r\n                          colorScheme=\"red\"\r\n                          aria-label=\"Delete\"\r\n                          icon={<Icon.RiDeleteBin6Fill />}\r\n                        />\r\n                      </UI.Stack>\r\n                    </UI.Td>\r\n                  </UI.Tr>\r\n                )\r\n              })\r\n            : <UI.Tr><UI.Td colSpan={5}>なにもありません</UI.Td></UI.Tr>}\r\n            <UI.Tr>\r\n              <UI.Td><UI.Input type=\"text\" {...register(\"setting_name\")} /></UI.Td>\r\n              <UI.Td><UI.Input type=\"text\" {...register(\"setting_label\")} /></UI.Td>\r\n              <UI.Td>\r\n                <UI.Select {...register(\"setting_type\")} >\r\n                  <option value=\"string\">String</option>\r\n                  <option value=\"int\">Number</option>\r\n                  <option value=\"boolean\">Boolean</option>\r\n                </UI.Select>\r\n              </UI.Td>\r\n              <UI.Td><UI.Input type=\"text\" {...register(\"setting_value\")} /></UI.Td>\r\n              <UI.Td>\r\n                <UI.Button type=\"submit\">追加</UI.Button>\r\n              </UI.Td>\r\n            </UI.Tr>\r\n          </UI.Tbody>\r\n        </UI.Table>\r\n      </form>\r\n      \r\n      <UI.Modal isOpen={isOpen} onClose={onClose}>\r\n        <UI.ModalOverlay />\r\n        <UI.ModalContent>\r\n          <UI.ModalHeader>UI.Modal Title</UI.ModalHeader>\r\n          <SettingItemEdit setting={edit} onClose={onClose} />\r\n          <UI.ModalCloseButton />\r\n        </UI.ModalContent>\r\n      </UI.Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SettingsDetail\r\n","import React from 'react'\r\nimport { Navigate, Outlet } from \"react-router-dom\"\r\nimport { useRecoilValue } from 'recoil'\r\nimport IsRedirect from '../atoms/IsRedirect'\r\n\r\nconst AuthProvider = () => {\r\n  const redirect = useRecoilValue(IsRedirect)\r\n  if (redirect) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Outlet />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AuthProvider\r\n","import { Administrator, Characteristic, Dashboard, Login, Setting, SettingsDetail } from \"../components\"\r\nimport { Layout } from \"../components/template\"\r\nimport * as Icon from \"react-icons/ri\";\r\nimport AuthProvider from \"../utils/AuthProvider\"\r\n\r\ntype RouterType = {\r\n  name: string|null\r\n  path: string|null\r\n  component: JSX.Element\r\n  icon: JSX.Element|null\r\n  children: RouterType[]|null\r\n}\r\n\r\nconst RouterConfig: RouterType[] = [\r\n  {\r\n    \"name\": \"ログイン\",\r\n    \"path\": \"/login\",\r\n    \"component\": <Login />,\r\n    \"icon\": null,\r\n    \"children\": null\r\n  },\r\n  {\r\n    \"name\": null,\r\n    \"path\": null,\r\n    \"component\": <AuthProvider />,\r\n    \"icon\": null,\r\n    \"children\": [\r\n      {\r\n        \"name\": null,\r\n        \"path\": null,\r\n        \"component\": <Layout />,\r\n        \"icon\": null,\r\n        \"children\": [\r\n          {\r\n            \"name\": \"ダッシュボード\",\r\n            \"path\": \"/\",\r\n            \"component\": <Dashboard />,\r\n            \"icon\": <Icon.RiDashboardFill />,\r\n            \"children\": null\r\n          },\r\n          {\r\n            \"name\": \"ゲーム設定\",\r\n            \"path\": \"/setting\",\r\n            \"component\": <Setting />,\r\n            \"icon\": <Icon.RiListSettingsFill />,\r\n            \"children\": null\r\n          },\r\n          {\r\n            \"name\": \"ゲーム設定 - 詳細\",\r\n            \"path\": \"/setting/:id\",\r\n            \"component\": <SettingsDetail />,\r\n            \"icon\": null,\r\n            \"children\": null\r\n          },\r\n          {\r\n            \"name\": \"特技管理\",\r\n            \"path\": \"/characteristic\",\r\n            \"component\": <Characteristic />,\r\n            \"icon\": <Icon.RiFireFill />,\r\n            \"children\": null\r\n          },\r\n          \r\n          {\r\n            \"name\": \"管理者\",\r\n            \"path\": \"/administrator\",\r\n            \"component\": <Administrator />,\r\n            \"icon\": <Icon.RiAdminFill />,\r\n            \"children\": null\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  }\r\n]\r\n\r\nexport default RouterConfig","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport RouterConfig from './config/RouterConfig';\n\nfunction App() {\n  return (\n    <Routes>\n      {RouterConfig.map(e => {\n        return (\n          <>\n            <Route path={e.path ? e.path : \"\"} element={e.component}>\n            {\n              e.children?.map(el => {\n                return (\n                  <>\n                    <Route path={el.path ? el.path : \"\"} element={el.component}>\n                      {\n                        el.children?.map(elm => {\n                          return (\n                            <>\n                              <Route path={elm.path ? elm.path : \"\"} element={elm.component} />\n                            </>\n                          )\n                        })\n                      }\n                    </Route>\n                  </>\n                )\n              })\n            }\n            </Route>\n          </>\n        )\n      })}\n    </Routes>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\"\r\n\r\nconst config :ThemeConfig = {\r\n  useSystemColorMode: true,\r\n  initialColorMode: \"light\",\r\n}\r\n\r\nconst fonts = {\r\n  heading: \"Noto Sans JP\",\r\n  body: \"Noto Sans JP\"\r\n}\r\n\r\nconst theme = extendTheme({ config, fonts })\r\n\r\nexport default theme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { RecoilRoot } from 'recoil';\nimport axios from 'axios';\nimport { BrowserRouter } from 'react-router-dom';\nimport theme from './config/ChakraConfig';\n\naxios.defaults.baseURL = 'https://api.localhost/api/v1/admin/'\naxios.defaults.withCredentials = true\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter>\n        <ChakraProvider theme={theme}>\n          <App />\n        </ChakraProvider>\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}